/*
   Solution

The brute force solution is looping over the array and then for each weight looping on all other weights while comparing the sum of each pair to the weight limit.
It takes O(n2) runtime complexity and involves checking every pair twice.

This is a classic case to use a hash table.
We iterate over arr only once. For each weight w in arr we compute its complement limit - w and check if that complement was hashed so far. If we find the complement in the hash table we return both indices, if not we hash w while using the weight as the hash key and the array index as the hash value (even if the same weight is found more than once it doesn't matter because at the time of the lookup we only need one product with that weight).

*/

   h = new hashTable()
   // iterate through the array
   for (index, w) in arr:
      // find a complement
      complementIndex = h.findKey(limit - w)
      // if there is an actual complement, then return index and complement's index
      if (complementIndex != null):
         return [index, complementIndex]
      // just place into hash table
      else:
         h.insert(w, index)
     return -1

/*

Runtime Complexity: Going over the array only once, performing constant time work for each weight and assuming we have a good hash function with rare collisions, we get a linear O(n) (where n in the length of the weights array).

Space Complexity: O(m) (where m in the number of the unique weights in array).

/*
